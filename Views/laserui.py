# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Views/laserui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
Experimental setup :
    • 2 saturated absorptions (one for each laser), for each :
        - photo-diode
        - lambda/4
        - PBS
        - 87/85 mixture cell
    • 1 oscilloscope RIGOL with 4 channels (it is important to use the good Scope because of the python class)
    • 1 red Pitaya
"""
# external modules
import time
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread
from pyqtgraph import PlotWidget
from scipy.signal import savgol_filter

# modules created
from LaserGUIs.Classes.ClassLaser import USBScope, Laser
from cplot import Cplot
from LaserGUIs.Classes.ClassRedPitaya import MyRedpitaya


class Ui_MainWindow(object):
    def __init__(self, host: str = "192.168.1.107", channel: float = 2):
        """
        init the main view of the GUI.
        :param str host: IP address of the laser, depending of the choice you made during the selection. by default he
        will initiate Shakdhag
        :param channel: red Pitaya channel, 1 for shakdhag and 2 for kapaz
        """
        self.host = host
        self.channel = channel
        self.addr_scope = 'TCPIP::192.168.1.137::INSTR'
        self.laser = Laser(host=self.host)
        self.red = MyRedpitaya()

        self.worker = WorkerThread(self.plotAbsSat)
        self.timer = QtCore.QTimer()
        self.timer.setInterval(6000)
        self.timer.timeout.connect(self.get_data_with_thread)
        self.timer.start()

    def setupUi(self, MainWindow: QtWidgets.QMainWindow):
        """
        initiate all the objects of the GUI and the classes Scope and AFG from ClassLaser. can be initiate in the init
        but this method also works and it is by default generated by pyuic% tool (that translates a ui file to python
        file)
        How this method works ?
        you have all your widget objects that are instantiated and then parametrized. each widget is contained in a
        layout with a position specified (x, y, "other parameters") like a grid. these layouts are contained in frames
        that are contained in the central widget.
        so : central main window > central widget > frames > layouts > widget objects
        THE MOST IMPORTANT POINT IS  THAT THIS METHOD WORKS ON THE THREAD LIKE A LONG TASK
        :param MainWindow: Qt object that generates the main view that contains every widgets like buttons or frames.
        :return: None
        """
        if self.channel == 2:
            try:
                self.scope = USBScope(addr=self.addr_scope)
                self.scope.set_scales(channel=2, x=2.51, offset=1.52, horizontal_scale=100)
                self.scope.set_scales(channel=4, x=1, offset=-6.84, horizontal_scale=100)
            except:
                self.dialog_browser.setText("couldn't scale axis")
        else:
            try:
                self.scope = USBScope(addr=self.addr_scope)
                self.scope.set_scales(channel=1, x=0.2, offset=-1.248, horizontal_scale=100)
                self.scope.set_scales(channel=3, x=1, offset=0.840, horizontal_scale=100)
            except:
                self.dialog_browser.setText("couldn't scale axis")

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1639, 1052)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("QMainWindow{\n"
                                 "    background-color:#333437;\n"
                                 "}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.left_widget = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_widget.sizePolicy().hasHeightForWidth())
        self.left_widget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.left_widget.setFont(font)
        self.left_widget.setObjectName("left_widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.left_widget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.dialog_frame = QtWidgets.QFrame(self.left_widget)
        self.dialog_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.dialog_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.dialog_frame.setObjectName("dialog_frame")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.dialog_frame)
        self.gridLayout_5.setObjectName("gridLayout_5")

        self.dialog_browser = QtWidgets.QTextBrowser(self.dialog_frame)
        if self.host == "192.168.1.107":
            self.dialog_browser.setText(f"connected to the laser on bottom \n"
                                        f"Laser IP address:{self.host}\n"
                                        f"channel Red Pitaya:{self.channel}"
                                        "turn on the diode and set the power to the edfa ;)\n"
                                        "To get the saturated absorption, set a ramp with 1Hz and low power laser")

        else:
            self.dialog_browser.setText(f"connected to laser on top \n"
                                        f"IP address:{self.host} \n"
                                        "turn on the diode and set the power to the edfa ;)\n"
                                        "To get the saturated absorption, set a ramp with 1Hz")

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dialog_browser.sizePolicy().hasHeightForWidth())
        self.dialog_browser.setSizePolicy(sizePolicy)
        self.dialog_browser.setObjectName("dialog_browser")
        self.gridLayout_5.addWidget(self.dialog_browser, 1, 0, 1, 1)
        self.exit_button = QtWidgets.QPushButton(self.dialog_frame)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.exit_button.setFont(font)
        self.exit_button.setStyleSheet("QPushButton {\n"
                                       "    background-color:#E5E5DB;\n"
                                       "    color:#303030;\n"
                                       "    border-radius:4px;\n"
                                       "    transition-duration: 0.4s;\n"
                                       "    height:20px;\n"
                                       "    width: 115px\n"
                                       "}\n"
                                       "                      \n"
                                       "QPushButton:hover {\n"
                                       "    background-color: #D4DAFF; \n"
                                       "    color:#FDFAEB;\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:pressed {\n"
                                       "    background-color: #303030;\n"
                                       "    color:#FAF9F9;\n"
                                       "}\n"
                                       "\n"
                                       "")
        self.exit_button.setObjectName("exit_button")
        self.gridLayout_5.addWidget(self.exit_button, 2, 0, 1, 1)
        self.dialog_label = QtWidgets.QLabel(self.dialog_frame)
        self.dialog_label.setStyleSheet("QLabel{\n"
                                        "    color:#FAF9F9;\n"
                                        "    font: 75 15pt \"Poppins\";\n"
                                        "}")
        self.dialog_label.setObjectName("dialog_label")
        self.gridLayout_5.addWidget(self.dialog_label, 0, 0, 1, 1)
        self.gridLayout_2.addWidget(self.dialog_frame, 2, 0, 1, 1)
        self.afg_frame = QtWidgets.QFrame(self.left_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.afg_frame.sizePolicy().hasHeightForWidth())
        self.afg_frame.setSizePolicy(sizePolicy)
        self.afg_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.afg_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.afg_frame.setObjectName("afg_frame")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.afg_frame)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.afg_label = QtWidgets.QLabel(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.afg_label.sizePolicy().hasHeightForWidth())
        self.afg_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.afg_label.setFont(font)
        self.afg_label.setStyleSheet("QLabel{\n"
                                     "    color:#FAF9F9;\n"
                                     "    font: 75 15pt \"Poppins\";\n"
                                     "}")
        self.afg_label.setObjectName("afg_label")
        self.gridLayout_4.addWidget(self.afg_label, 0, 0, 1, 1)
        self.sine_button = QtWidgets.QPushButton(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sine_button.sizePolicy().hasHeightForWidth())
        self.sine_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.sine_button.setFont(font)
        self.sine_button.setStyleSheet("QPushButton {\n"
                                       "    background-color:#E5E5DB;\n"
                                       "    color:#303030;\n"
                                       "    border-radius:4px;\n"
                                       "    transition-duration: 0.4s;\n"
                                       "    height:20px;\n"
                                       "    width: 115px\n"
                                       "}\n"
                                       "                      \n"
                                       "QPushButton:hover {\n"
                                       "    background-color: #D4DAFF; \n"
                                       "    color:#FDFAEB;\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:pressed {\n"
                                       "    background-color: #303030;\n"
                                       "    color:#FAF9F9;\n"
                                       "}\n"
                                       "\n"
                                       "")
        self.sine_button.setObjectName("sine_button")
        self.gridLayout_4.addWidget(self.sine_button, 4, 0, 1, 1)
        self.volt_label = QtWidgets.QLabel(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.volt_label.sizePolicy().hasHeightForWidth())
        self.volt_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.volt_label.setFont(font)
        self.volt_label.setStyleSheet("QLabel{\n"
                                      "    color:#FAF9F9;\n"
                                      "    font: 13pt \"Poppins\";\n"
                                      "}")
        self.volt_label.setObjectName("volt_label")
        self.gridLayout_4.addWidget(self.volt_label, 0, 2, 1, 1)
        self.ramp_button = QtWidgets.QPushButton(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ramp_button.sizePolicy().hasHeightForWidth())
        self.ramp_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.ramp_button.setFont(font)
        self.ramp_button.setStyleSheet("QPushButton {\n"
                                       "    background-color:#E5E5DB;\n"
                                       "    color:#303030;\n"
                                       "    border-radius:4px;\n"
                                       "    transition-duration: 0.4s;\n"
                                       "    height:20px;\n"
                                       "    width: 115px\n"
                                       "}\n"
                                       "                      \n"
                                       "QPushButton:hover {\n"
                                       "    background-color: #D4DAFF; \n"
                                       "    color:#FDFAEB;\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:pressed {\n"
                                       "    background-color: #303030;\n"
                                       "    color:#FAF9F9;\n"
                                       "}\n"
                                       "\n"
                                       "")
        self.ramp_button.setObjectName("ramp_button")
        self.gridLayout_4.addWidget(self.ramp_button, 2, 0, 1, 1)
        self.volt_spinbox = QtWidgets.QDoubleSpinBox(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.volt_spinbox.sizePolicy().hasHeightForWidth())
        self.volt_spinbox.setSizePolicy(sizePolicy)
        self.volt_spinbox.setStyleSheet("QDoubleSpinBox{\n"
                                        "    width:50px;\n"
                                        "    background-color:#EBEAE5;\n"
                                        "}")
        self.volt_spinbox.setObjectName("volt_spinbox")
        self.volt_spinbox.setMaximum(5)
        self.volt_spinbox.setMinimum(-8)
        self.gridLayout_4.addWidget(self.volt_spinbox, 0, 1, 1, 1)
        self.pulse_button = QtWidgets.QPushButton(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pulse_button.sizePolicy().hasHeightForWidth())
        self.pulse_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.pulse_button.setFont(font)
        self.pulse_button.setStyleSheet("QPushButton {\n"
                                        "    background-color:#E5E5DB;\n"
                                        "    color:#303030;\n"
                                        "    border-radius:4px;\n"
                                        "    transition-duration: 0.4s;\n"
                                        "    height:20px;\n"
                                        "    width: 115px\n"
                                        "}\n"
                                        "                      \n"
                                        "QPushButton:hover {\n"
                                        "    background-color: #D4DAFF; \n"
                                        "    color:#FDFAEB;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: #303030;\n"
                                        "    color:#FAF9F9;\n"
                                        "}\n"
                                        "\n"
                                        "")
        self.pulse_button.setObjectName("pulse_button")
        self.gridLayout_4.addWidget(self.pulse_button, 3, 0, 1, 1)
        self.square_button = QtWidgets.QPushButton(self.afg_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.square_button.sizePolicy().hasHeightForWidth())
        self.square_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.square_button.setFont(font)
        self.square_button.setStyleSheet("QPushButton {\n"
                                         "    background-color:#E5E5DB;\n"
                                         "    color:#303030;\n"
                                         "    border-radius:4px;\n"
                                         "    transition-duration: 0.4s;\n"
                                         "    height:20px;\n"
                                         "    width: 115px\n"
                                         "}\n"
                                         "                      \n"
                                         "QPushButton:hover {\n"
                                         "    background-color: #D4DAFF; \n"
                                         "    color:#FDFAEB;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    background-color: #303030;\n"
                                         "    color:#FAF9F9;\n"
                                         "}\n"
                                         "\n"
                                         "")
        self.square_button.setObjectName("square_button")
        self.gridLayout_4.addWidget(self.square_button, 5, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem, 0, 3, 1, 1)
        self.gridLayout_2.addWidget(self.afg_frame, 1, 0, 1, 1)
        self.laser_frame = QtWidgets.QFrame(self.left_widget)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.laser_frame.setFont(font)
        self.laser_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.laser_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.laser_frame.setObjectName("laser_frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.laser_frame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.diode_button = QtWidgets.QRadioButton(self.laser_frame)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.diode_button.setFont(font)
        self.diode_button.setStyleSheet("QRadioButton{\n"
                                        "    color:#FAF9F9;\n"
                                        "}")
        self.diode_button.setObjectName("diode_button")
        self.gridLayout_3.addWidget(self.diode_button, 0, 0, 1, 1)
        self.power_label = QtWidgets.QLabel(self.laser_frame)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.power_label.setFont(font)
        self.power_label.setStyleSheet("QLabel{\n"
                                       "    color:#FAF9F9;\n"
                                       "    font: 13pt \"Poppins\";\n"
                                       "}")
        self.power_label.setObjectName("power_label")
        self.gridLayout_3.addWidget(self.power_label, 1, 2, 1, 1)
        self.edfa_label = QtWidgets.QLabel(self.laser_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.edfa_label.sizePolicy().hasHeightForWidth())
        self.edfa_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(15)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.edfa_label.setFont(font)
        self.edfa_label.setStyleSheet("QLabel{\n"
                                      "    color:#FAF9F9;\n"
                                      "    font: 75 15pt \"Poppins\";\n"
                                      "}")
        self.edfa_label.setObjectName("edfa_label")
        self.gridLayout_3.addWidget(self.edfa_label, 1, 0, 1, 1)
        self.power_spinbox = QtWidgets.QDoubleSpinBox(self.laser_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.power_spinbox.sizePolicy().hasHeightForWidth())
        self.power_spinbox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        self.power_spinbox.setFont(font)
        self.power_spinbox.setStyleSheet("QDoubleSpinBox{\n"
                                         "    width:50px;\n"
                                         "    background-color:#EBEAE5;\n"
                                         "}")
        self.power_spinbox.setObjectName("power_spinbox")
        self.power_spinbox.setMaximum(1195)
        self.gridLayout_3.addWidget(self.power_spinbox, 1, 1, 1, 1)
        self.shutdown_button = QtWidgets.QPushButton(self.laser_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.shutdown_button.sizePolicy().hasHeightForWidth())
        self.shutdown_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.shutdown_button.setFont(font)
        self.shutdown_button.setStyleSheet("QPushButton {\n"
                                           "    background-color:#E5E5DB;\n"
                                           "    color:#303030;\n"
                                           "    border-radius:4px;\n"
                                           "    transition-duration: 0.4s;\n"
                                           "    height:20px;\n"
                                           "    width: 115px\n"
                                           "}\n"
                                           "                      \n"
                                           "QPushButton:hover {\n"
                                           "    background-color: #D4DAFF; \n"
                                           "    color:#FDFAEB;\n"
                                           "}\n"
                                           "\n"
                                           "QPushButton:pressed {\n"
                                           "    background-color: #303030;\n"
                                           "    color:#FAF9F9;\n"
                                           "}\n"
                                           "\n"
                                           "")
        self.shutdown_button.setObjectName("shutdown_button")
        self.gridLayout_3.addWidget(self.shutdown_button, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 1, 3, 1, 1)
        self.gridLayout_2.addWidget(self.laser_frame, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.left_widget, 0, 0, 1, 1)
        self.right_widget = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.right_widget.sizePolicy().hasHeightForWidth())
        self.right_widget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.right_widget.setFont(font)
        self.right_widget.setObjectName("right_widget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.right_widget)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.display_frame = QtWidgets.QFrame(self.right_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.display_frame.sizePolicy().hasHeightForWidth())
        self.display_frame.setSizePolicy(sizePolicy)
        self.display_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.display_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.display_frame.setObjectName("display_frame")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.display_frame)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.display_laser_state_button = QtWidgets.QPushButton(self.display_frame)
        font = QtGui.QFont()
        font.setFamily("Poppins")
        self.display_laser_state_button.setFont(font)
        self.display_laser_state_button.setStyleSheet("QPushButton {\n"
                                                      "    background-color:#E5E5DB;\n"
                                                      "    color:#303030;\n"
                                                      "    border-radius:4px;\n"
                                                      "    transition-duration: 0.4s;\n"
                                                      "    height:20px;\n"
                                                      "    width: 115px\n"
                                                      "}\n"
                                                      "                      \n"
                                                      "QPushButton:hover {\n"
                                                      "    background-color: #D4DAFF; \n"
                                                      "    color:#FDFAEB;\n"
                                                      "}\n"
                                                      "\n"
                                                      "QPushButton:pressed {\n"
                                                      "    background-color: #303030;\n"
                                                      "    color:#FAF9F9;\n"
                                                      "}\n"
                                                      "\n"
                                                      "")
        self.display_laser_state_button.setObjectName("display_laser_state_button")
        self.gridLayout_7.addWidget(self.display_laser_state_button, 3, 0, 1, 1)

        self.plotwidget_abs_sat = PlotWidget(self.display_frame, xlabel="Volts [V]")
        self.plotwidget_abs_sat.setObjectName("plotwidget_abs_sat")
        self.gridLayout_7.addWidget(self.plotwidget_abs_sat, 1, 0, 1, 1)
        self.plotwidget_abs_sat.setLabel(axis='left', text='Transmission T(V) [wu]')
        self.plotwidget_abs_sat.setLabel(axis='bottom', text='Voltage [V]')
        self.plotwidget_signal = PlotWidget(self.display_frame)
        self.plotwidget_signal.setObjectName("plotwidget_signal")
        self.plotwidget_signal.setLabel(axis='left', text='Voltage [V]')
        self.plotwidget_signal.setLabel(axis='bottom', text='time [s]')
        self.gridLayout_7.addWidget(self.plotwidget_signal, 2, 0, 1, 1)
        self.gridLayout_6.addWidget(self.display_frame, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.right_widget, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.sliderOffset = QtWidgets.QSlider(self.afg_frame)
        self.sliderOffset.setStyleSheet("")
        self.sliderOffset.setOrientation(QtCore.Qt.Horizontal)
        self.sliderOffset.setObjectName("sliderOffset")
        self.sliderOffset.setMaximum(28)
        self.sliderOffset.setMinimum(-80)
        self.sliderOffset.setSingleStep(1)
        self.sliderOffset.valueChanged.connect(self.voltage_changed_with_slider)
        self.sliderPower = QtWidgets.QSlider(self.laser_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sliderPower.sizePolicy().hasHeightForWidth())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sliderOffset.sizePolicy().hasHeightForWidth())

        self.gridLayout_4.addWidget(self.sliderOffset, 1, 0, 1, 1)
        self.sliderPower.setOrientation(QtCore.Qt.Horizontal)
        self.sliderPower.setObjectName("sliderPower")
        self.sliderPower.setStyleSheet("QSlider{"
                                       "height:30px;"
                                       "}")
        self.sliderPower.setMaximum(1195)
        self.sliderPower.setMinimum(0)
        self.sliderPower.valueChanged.connect(self.power_changed_with_slider)
        self.gridLayout_3.addWidget(self.sliderPower, 3, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.display_frame)
        self.label.setStyleSheet("QLabel{\n"
                                 "    color:#FAF9F9;\n"
                                 "    font: 75 15pt \"Poppins\";\n"
                                 "}")
        self.label.setObjectName("label")
        self.gridLayout_7.addWidget(self.label, 0, 0, 1, 1)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1639, 24))
        self.menubar.setObjectName("menubar")
        self.menuIP_Configuration = QtWidgets.QMenu(self.menubar)
        self.menuIP_Configuration.setObjectName("menuIP_Configuration")
        MainWindow.setMenuBar(self.menubar)
        self.actionLaser_Muquans = QtWidgets.QAction(MainWindow)
        self.actionLaser_Muquans.setObjectName("actionLaser_Muquans")
        self.actionAFG = QtWidgets.QAction(MainWindow)
        self.actionAFG.setObjectName("actionAFG")
        self.actionScope = QtWidgets.QAction(MainWindow)
        self.actionScope.setObjectName("actionScope")
        self.menuIP_Configuration.addAction(self.actionLaser_Muquans)
        self.menuIP_Configuration.addAction(self.actionAFG)
        self.menuIP_Configuration.addAction(self.actionScope)
        self.menubar.addAction(self.menuIP_Configuration.menuAction())

        # connect menus to method:
        self.actionLaser_Muquans.triggered.connect(self.openIPLaser)
        self.actionAFG.triggered.connect(self.openIPAFG)

        # connect buttons with methods :
        self.exit_button.clicked.connect(self.exitButton)
        self.pulse_button.clicked.connect(self.openPulse)
        self.ramp_button.clicked.connect(self.openRamp)
        self.sine_button.clicked.connect(self.openSine)
        self.square_button.clicked.connect(self.openSquare)
        self.diode_button.clicked.connect(self.onClicked)
        self.shutdown_button.clicked.connect(self.edfaShutdown)

        self.power_spinbox.valueChanged.connect(self.powerUpdate)
        self.volt_spinbox.valueChanged.connect(self.changeFrequency)

        self.display_laser_state_button.clicked.connect(self.openCplot)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow: QtWidgets.QMainWindow):
        """
        function that set text on different widget objects, out of the main thread
        :param MainWindow: Qt object that generates the main view that contains every widgets like buttons or frames.
        :return: None
        """
        _translate = QtCore.QCoreApplication.translate
        if self.host == "192.168.1.108":
            MainWindow.setWindowTitle(_translate("MainWindow", "Kapaz"))
        else:
            MainWindow.setWindowTitle(_translate("MainWindow", "Shakdhag"))
        self.exit_button.setText(_translate("MainWindow", "Exit"))
        self.dialog_label.setText(_translate("MainWindow", "TextLabel"))
        self.afg_label.setText(_translate("MainWindow", "AFG Controller"))
        self.sine_button.setText(_translate("MainWindow", "Sine"))
        self.volt_label.setText(_translate("MainWindow", "sent to the Laser Diode"))
        self.ramp_button.setText(_translate("MainWindow", "Ramp"))
        self.pulse_button.setText(_translate("MainWindow", "Pulse"))
        self.square_button.setText(_translate("MainWindow", "Square"))
        self.diode_button.setText(_translate("MainWindow", "Diode <ON|OFF>"))
        self.power_label.setText(_translate("MainWindow", "sent to the Laser EDFA"))
        self.edfa_label.setText(_translate("MainWindow", "EDFA Controller"))
        self.shutdown_button.setText(_translate("MainWindow", "Shutdown"))
        self.display_laser_state_button.setText(_translate("MainWindow", "CPLOT COMMAND"))
        self.menuIP_Configuration.setTitle(_translate("MainWindow", "IP Configuration"))
        self.actionLaser_Muquans.setText(_translate("MainWindow", "Laser Muquans"))
        self.actionAFG.setText(_translate("MainWindow", "AFG "))
        self.actionScope.setText(_translate("MainWindow", "Scope"))

    def onClicked(self) -> bool:
        """
        method Tell to the UX if the diode is ON or not. if not, intensity isn't sent to the edfa
        :return:bool
        """
        if self.diode_button.isChecked():
            self.laser.diode_on()
            self.dialog_browser.setText("diode on")
            return True
        else:
            self.laser.shutdown()
            time.sleep(4)
            self.laser.diode_off()
            self.dialog_browser.setText("diode off")
            return False

    def power_to_intensity(self, x: float):
        """
         method that converts the power entered in the spin box or the slider's position in a interpolation function of
         class Laser. The function converts
        :param x: Value taken from position's slider or spin box.
        :return: 0<y<=,2.5,3 where y is the intensity sent to the edfa
        """
        if self.host == "192.168.1.108":
            maximum = 3
        else:
            maximum = 2.5
        y = self.laser.f(x)
        if y > maximum:
            y = maximum
        elif y < 0.1:
            y = 0.1
        y = float(y)
        self.dialog_browser.setText(f"power sent to the edfa : {np.round(y, 1)} [mA]")
        return y

    def edfaShutdown(self):
        """
        method that shutdown the laser properly.
        :return: None
        """
        if self.onClicked() is True:
            self.laser.shutdown()
            self.dialog_browser.setText('sleeping during 4 secs')
            time.sleep(4)
            self.laser.diode_off()
            self.dialog_browser.setText('laser shutdown')
            self.dialog_browser.setText('laser diode off')
            self.diode_button.setChecked(False)
            self.power_spinbox.setValue(0)
            self.sliderPower.setValue(0)
        else:
            self.laser.shutdown()
            self.dialog_browser.setText('sleeping during 4 secs')
            time.sleep(4)
            self.laser.diode_off()
            self.dialog_browser.setText('laser shutdown')
            self.dialog_browser.setText('laser diode off')
            self.power_spinbox.setValue(0)
            self.sliderPower.setValue(0)

    def exitButton(self):
        """
        exit the software without danger
        :return: None
        """
        import sys
        self.dialog_browser.setText("sleeping during 4s before exit. Zzzz")
        self.laser.diode_off()
        self.laser.shutdown()
        self.laser.exit()
        sys.exit()

    def powerUpdate(self):
        """
        take on reel time the value of the dial button, convert it and send it to the edfa (another way)
        :return: None
        """
        if self.onClicked():
            value = str(self.power_spinbox.value())
            value_txt = str(float(value))
            self.power_label.setText(f"set power: {value_txt} mW")
            value = float(value)
            value = self.power_to_intensity(value)
            self.laser.set_power(value)
        else:
            self.dialog_browser.setText("error, diode off, no power sent. Please turn on the diode")

    def changeFrequency(self):
        # import pyrpl
        # lock = pyrpl.lockbox.Lockbox(parent=self.red)
        value = float(str(self.volt_spinbox.value()))
        try:
            self.red.set_dc_offset(output=self.channel, offset=value)
            # lock.lock()
            self.dialog_browser.setText(f"offset {value} V")
        except:
            self.dialog_browser.setText("Error, could not connect to the AFG by this way")

    def openPulse(self):
        """
        open the window to parameter the pulse signal
        :return: None
        """
        try:
            self.window = QtWidgets.QMainWindow()
            self.ui = PulseSignals(output=self.channel)
            self.ui.setupUi(self.window)
            self.window.show()
        except:
            self.dialog_browser.setText("error, could not connect to specified AFG")

    def openRamp(self):
        """
        open the window ramp parameters to set  ramp signal on diode
        :return: None
        """
        try:
            self.window = QtWidgets.QMainWindow()
            self.ui = RampSignals(output=self.channel)
            self.ui.setupUi(self.window)
            self.window.show()
        except:
            self.dialog_browser.setText("error, could not connect to specified AFG")

    def openSine(self):
        try:
            self.window = QtWidgets.QMainWindow()
            self.ui = SineSignals(output=self.channel)
            self.ui.setupUi(self.window)
            self.window.show()
        except:
            self.dialog_browser.setText("error, could not connect to specified AFG")

    def openSquare(self):
        try:
            self.window = QtWidgets.QMainWindow()
            self.ui = SquareSignals(output=self.channel)
            self.ui.setupUi(self.window)
            self.window.show()
        except:
            self.dialog_browser.setText("error, could not connect to specified AFG")

    def power_changed_with_slider(self):
        """
        take the power slider value and send it to the edfa after convert it in mA with power_to_intensity.
        :return:None
        """
        if self.onClicked() is True:
            value: str = str(self.sliderPower.value())
            self.power_spinbox.setValue(float(value))
            power = self.power_to_intensity(float(value))
            self.laser.set_power(power)
        else:
            self.dialog_browser.setText("power no sent to the diode, please turn on the diode.")

    def voltage_changed_with_slider(self):
        """
        change the offset sent to the diode between -8V and 5V
        :return: None
        """
        try:
            value: str = str(self.sliderOffset.value())
            self.volt_spinbox.setValue(float(value) / 10)
        except:
            self.dialog_browser.setText("error, red not connected")

    def plotAbsSat(self):
        """
        get the information of the afg and plot the signal on the UI
        Ch1 from scope is for absorption and ch2 for AFG signal
        :return: None
        """
        # get data from scope :
        try:
            self.plotwidget_abs_sat.plotItem.clear()
            self.plotwidget_signal.plotItem.clear()
        except:
            # just a secured try to not kill the app.
            pass
        try:
            if self.host == "192.168.1.107":
                Data, Time = self.scope.get_waveform(channels=[4], plot=False)  # contains Data:np.array, Time:np.array
                volt, Time = self.scope.get_waveform(channels=[2], plot=False)
            else:
                Data, Time = self.scope.get_waveform(channels=[3], plot=False)  # contains Data:np.array, Time:np.array
                volt, Time = self.scope.get_waveform(channels=[1], plot=False)
            # Normalise Data to have the transmission with the good ax
            # The normalisation allows us to not use two photo-diodes cause.
            # smooth the array
            Data = savgol_filter(Data / np.amax(Data), 21, 3)

            # plot
            self.plotwidget_abs_sat.plot(volt, Data)
            self.plotwidget_signal.plot(Time, volt)
        except:
            pass

    def plotAFGSignal(self):
        """
        for the moment function deleted.
        :return: None
        """
        try:
            self.plotwidget_signal.plotItem.clear()
            volt, time = self.scope.get_waveform(channels=[3])

            self.plotwidget_signal.plot(time, volt)
        except:
            self.dialog_browser.setText('')

    def openCplot(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Cplot(host=self.host)
        self.ui.setupUi(self.window)
        self.window.show()

    def get_data_with_thread(self):
        """
        call the method that executes the thread.
        :return:
        """
        self.worker.get_data()


class WorkerThread(QThread):
    output = QtCore.pyqtSignal(np.ndarray)

    def __init__(self, fun, parent=None):
        """

        :param fun: enter the function you want to let run in another thread, in our case it is the method that plots
        in time the saturated absorption cell.
        :param parent: None
        """
        QThread.__init__(self, parent)
        self.fun = fun

    def get_data(self):
        """
        call the run (the start is an attribute from QThread)
        :return:
        """
        try:
            self.start()
        except:
            pass

    def run(self):
        """
        run the function. must never be called
        :return: None
        """
        try:
            self.fun()
            self.output.emit(self.fun)
        except:
            pass


"""
I've been forced (for the moment) to put signal classes here because of the inherit, I couldn't import MainWindow in
their script because it created a loop that is not allowed.
"""


class PulseSignals(Ui_MainWindow):

    def __init__(self, addr=None, output=None):
        self.addr = addr
        self.output = output
        self.red = MyRedpitaya()
        self.MainWindow = QtWidgets.QMainWindow()
        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout = QtWidgets.QGridLayout()
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.lineEdit_offset = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_frequency = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_amplitude = QtWidgets.QLineEdit(self.centralwidget)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.lineEdit_amplitude.setText('10')
        self.lineEdit_frequency.setText('1')
        self.lineEdit_offset.setText('0')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(261, 320)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("QMainWindow {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.centralwidget.setStyleSheet("QWidget {\n"
                                         "    background-color : #303030;\n"
                                         "     color : #FDFAEB;\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout.setObjectName("gridLayout")
        self.label_3.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 1, 1, 1)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_4.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 3, 1, 1, 1)
        sizePolicy.setHeightForWidth(self.lineEdit_offset.sizePolicy().hasHeightForWidth())
        self.lineEdit_offset.setSizePolicy(sizePolicy)
        self.lineEdit_offset.setStyleSheet("QLineEdit{\n"
                                           "    background-color:#f6f6f6;\n"
                                           "    border: 2px solid gray;\n"
                                           "    border-radius: 5px;\n"
                                           "    padding: 0 8px;\n"
                                           "    selection-background-color: darkgray;\n"
                                           "    font-size: 16px;\n"
                                           "    color: #303030;"
                                           "}\n"
                                           "\n"
                                           " QLineEdit:focus { \n"
                                           "    background-color#f6f6f6;\n"
                                           "}\n"
                                           "")
        self.lineEdit_offset.setObjectName("lineEdit_5")
        self.gridLayout.addWidget(self.lineEdit_offset, 3, 0, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_frequency.sizePolicy().hasHeightForWidth())
        self.lineEdit_frequency.setSizePolicy(sizePolicy)
        self.lineEdit_frequency.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_frequency.setObjectName("lineEdit_6")
        self.gridLayout.addWidget(self.lineEdit_frequency, 2, 0, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_amplitude.sizePolicy().hasHeightForWidth())
        self.lineEdit_amplitude.setSizePolicy(sizePolicy)
        self.lineEdit_amplitude.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_amplitude.setObjectName("lineEdit_7")
        self.gridLayout.addWidget(self.lineEdit_amplitude, 1, 0, 1, 1)
        self.label_2.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 1, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
                                      "    background-color:#FFF9D4;\n"
                                      "    color:#303030;\n"
                                      "    border-radius: 8px;\n"
                                      "    transition-duration: 0.4s;\n"
                                      "    height:40px;\n"
                                      "    width:115px;\n"
                                      "    color: #303030;"
                                      "}\n"
                                      "                      \n"
                                      "QPushButton:hover {\n"
                                      "    background-color: #D4DAFF; \n"
                                      "    color:#FDFAEB;\n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 8, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.pushButton.clicked.connect(self.setSignal)
        self.pushButton.clicked.connect(MainWindow.close)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setSignal(self):
        amplitude = float(self.lineEdit_amplitude.text())
        frequency = float(self.lineEdit_frequency.text())
        offset = float(self.lineEdit_offset.text())
        self.red.set_pulse(output=self.output, frequency=frequency, amplitude=amplitude, offset=offset)

    def retranslateUi(self, MainWindow):
        """
        write txt on UI
        :param MainWindow: yes
        :return: void
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Frequency [Hz]"))
        self.label.setText(_translate("MainWindow", "Pulse"))
        self.label_4.setText(_translate("MainWindow", "Offset [V]"))
        self.label_2.setText(_translate("MainWindow", "Amplitude [V]"))
        self.pushButton.setText(_translate("MainWindow", "Apply"))


class RampSignals(Ui_MainWindow):
    def __init__(self, addr=None, output=None):
        self.addr = addr
        self.output = output
        self.red = MyRedpitaya()
        self.RampWindow = QtWidgets.QMainWindow()
        self.centralwidget = QtWidgets.QWidget(self.RampWindow)
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout = QtWidgets.QGridLayout()
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.lineEdit_offset = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_frequency = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_amplitude = QtWidgets.QLineEdit(self.centralwidget)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)

        self.lineEdit_amplitude.setText('10')
        self.lineEdit_frequency.setText('1')
        self.lineEdit_offset.setText('0')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(261, 320)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("QMainWindow {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.centralwidget.setStyleSheet("QWidget {\n"
                                         "    background-color : #303030;\n"
                                         "     color : #FDFAEB;\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout.setObjectName("gridLayout")
        self.label_3.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 1, 1, 1)

        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)

        self.label_4.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 3, 1, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_offset.sizePolicy().hasHeightForWidth())
        self.lineEdit_offset.setSizePolicy(sizePolicy)
        self.lineEdit_offset.setStyleSheet("QLineEdit{\n"
                                           "    background-color:#f6f6f6;\n"
                                           "    border: 2px solid gray;\n"
                                           "    border-radius: 5px;\n"
                                           "    padding: 0 8px;\n"
                                           "    selection-background-color: darkgray;\n"
                                           "    font-size: 16px;\n"
                                           "    color: #303030;"
                                           "}\n"
                                           "\n"
                                           " QLineEdit:focus { \n"
                                           "    background-color#f6f6f6;\n"
                                           "}\n"
                                           "")
        self.lineEdit_offset.setObjectName("lineEdit_5")
        self.gridLayout.addWidget(self.lineEdit_offset, 3, 0, 1, 1)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_frequency.sizePolicy().hasHeightForWidth())
        self.lineEdit_frequency.setSizePolicy(sizePolicy)
        self.lineEdit_frequency.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_frequency.setObjectName("lineEdit_6")
        self.gridLayout.addWidget(self.lineEdit_frequency, 2, 0, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_amplitude.sizePolicy().hasHeightForWidth())
        self.lineEdit_amplitude.setSizePolicy(sizePolicy)
        self.lineEdit_amplitude.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_amplitude.setObjectName("lineEdit_7")
        self.gridLayout.addWidget(self.lineEdit_amplitude, 1, 0, 1, 1)
        self.label_2.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 1, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
                                      "    background-color:#FFF9D4;\n"
                                      "    color:#303030;\n"
                                      "    border-radius: 8px;\n"
                                      "    transition-duration: 0.4s;\n"
                                      "    height:40px;\n"
                                      "    width:115px;\n"
                                      "    color: #303030;"
                                      "}\n"
                                      "                      \n"
                                      "QPushButton:hover {\n"
                                      "    background-color: #D4DAFF; \n"
                                      "    color:#FDFAEB;\n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 8, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.pushButton.clicked.connect(self.setSignal)
        self.pushButton.clicked.connect(MainWindow.close)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setSignal(self):
        amplitude = float(self.lineEdit_amplitude.text())
        frequency = float(self.lineEdit_frequency.text())
        offset = float(self.lineEdit_offset.text())
        self.red.set_ramp(output=self.output, frequency=frequency, amplitude=amplitude, offset=offset)

    def retranslateUi(self, MainWindow):
        """
        write txt on UI
        :param MainWindow: yes
        :return: void
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Frequency [Hz]"))
        self.label.setText(_translate("MainWindow", "Ramp"))
        self.label_4.setText(_translate("MainWindow", "Offset [V]"))
        self.label_2.setText(_translate("MainWindow", "Amplitude [V]"))
        self.pushButton.setText(_translate("MainWindow", "Apply"))


class SineSignals(Ui_MainWindow):
    def __init__(self, addr=None, output=None):
        self.addr = addr
        self.output = output
        self.red = MyRedpitaya()
        self.MainWindow = QtWidgets.QMainWindow()
        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout = QtWidgets.QGridLayout()
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.lineEdit_frequency = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_amplitude = QtWidgets.QLineEdit(self.centralwidget)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.lineEdit_amplitude.setText('10')
        self.lineEdit_frequency.setText('1')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(261, 320)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("QMainWindow {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.centralwidget.setStyleSheet("QWidget {\n"
                                         "    background-color : #303030;\n"
                                         "     color : #FDFAEB;\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout.setObjectName("gridLayout")
        self.label_3.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 1, 1, 1)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_frequency.sizePolicy().hasHeightForWidth())
        self.lineEdit_frequency.setSizePolicy(sizePolicy)
        self.lineEdit_frequency.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_frequency.setObjectName("lineEdit_6")
        self.gridLayout.addWidget(self.lineEdit_frequency, 2, 0, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_amplitude.sizePolicy().hasHeightForWidth())
        self.lineEdit_amplitude.setSizePolicy(sizePolicy)
        self.lineEdit_amplitude.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_amplitude.setObjectName("lineEdit_7")
        self.gridLayout.addWidget(self.lineEdit_amplitude, 1, 0, 1, 1)
        self.label_2.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 1, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
                                      "    background-color:#FFF9D4;\n"
                                      "    color:#303030;\n"
                                      "    border-radius: 8px;\n"
                                      "    transition-duration: 0.4s;\n"
                                      "    height:40px;\n"
                                      "    width:115px;\n"
                                      "    color: #303030;"
                                      "}\n"
                                      "                      \n"
                                      "QPushButton:hover {\n"
                                      "    background-color: #D4DAFF; \n"
                                      "    color:#FDFAEB;\n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 8, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.pushButton.clicked.connect(self.setSignal)
        self.pushButton.clicked.connect(MainWindow.close)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setSignal(self):
        amplitude = float(self.lineEdit_amplitude.text())
        frequency = float(self.lineEdit_frequency.text())
        self.red.set_sine(output=self.output, frequency=frequency, amplitude=amplitude)

    def retranslateUi(self, MainWindow):
        """
        write txt on UI
        :param MainWindow: yes
        :return: void
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Frequency [Hz]"))
        self.label.setText(_translate("MainWindow", "Sine"))
        self.label_2.setText(_translate("MainWindow", "Amplitude [V]"))
        self.pushButton.setText(_translate("MainWindow", "Apply"))


class SquareSignals(Ui_MainWindow):
    def __init__(self, addr=None, output=None):
        self.addr = addr
        self.output = output
        self.red = MyRedpitaya()
        self.MainWindow = QtWidgets.QMainWindow()
        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout = QtWidgets.QGridLayout()
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.lineEdit_offset = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_frequency = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_amplitude = QtWidgets.QLineEdit(self.centralwidget)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)

        self.lineEdit_amplitude.setText('10')
        self.lineEdit_frequency.setText('1')
        self.lineEdit_offset.setText('0')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(261, 320)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("QMainWindow {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.centralwidget.setStyleSheet("QWidget {\n"
                                         "    background-color : #303030;\n"
                                         "     color : #FDFAEB;\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout.setObjectName("gridLayout")
        self.label_3.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 1, 1, 1)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel {\n"
                                 "    background-color : #303030;\n"
                                 "     color : #FDFAEB;\n"
                                 "}")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_4.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 3, 1, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_offset.sizePolicy().hasHeightForWidth())
        self.lineEdit_offset.setSizePolicy(sizePolicy)
        self.lineEdit_offset.setStyleSheet("QLineEdit{\n"
                                           "    background-color:#f6f6f6;\n"
                                           "    border: 2px solid gray;\n"
                                           "    border-radius: 5px;\n"
                                           "    padding: 0 8px;\n"
                                           "    selection-background-color: darkgray;\n"
                                           "    font-size: 16px;\n"
                                           "    color: #303030;"
                                           "}\n"
                                           "\n"
                                           " QLineEdit:focus { \n"
                                           "    background-color#f6f6f6;\n"
                                           "}\n"
                                           "")
        self.lineEdit_offset.setObjectName("lineEdit_5")
        self.gridLayout.addWidget(self.lineEdit_offset, 3, 0, 1, 1)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_frequency.sizePolicy().hasHeightForWidth())
        self.lineEdit_frequency.setSizePolicy(sizePolicy)
        self.lineEdit_frequency.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_frequency.setObjectName("lineEdit_6")
        self.gridLayout.addWidget(self.lineEdit_frequency, 2, 0, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_amplitude.sizePolicy().hasHeightForWidth())
        self.lineEdit_amplitude.setSizePolicy(sizePolicy)
        self.lineEdit_amplitude.setStyleSheet("QLineEdit{\n"
                                              "    background-color:#f6f6f6;\n"
                                              "    border: 2px solid gray;\n"
                                              "    border-radius: 5px;\n"
                                              "    padding: 0 8px;\n"
                                              "    selection-background-color: darkgray;\n"
                                              "    font-size: 16px;\n"
                                              "    color: #303030;"
                                              "}\n"
                                              "\n"
                                              " QLineEdit:focus { \n"
                                              "    background-color#f6f6f6;\n"
                                              "}\n"
                                              "")
        self.lineEdit_amplitude.setObjectName("lineEdit_7")
        self.gridLayout.addWidget(self.lineEdit_amplitude, 1, 0, 1, 1)
        self.label_2.setStyleSheet("QLabel {\n"
                                   "    background-color : #303030;\n"
                                   "     color : #FDFAEB;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 1, 1, 1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiCondensed")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
                                      "    background-color:#FFF9D4;\n"
                                      "    color:#303030;\n"
                                      "    border-radius: 8px;\n"
                                      "    transition-duration: 0.4s;\n"
                                      "    height:40px;\n"
                                      "    width:115px;\n"
                                      "    color: #303030;"
                                      "}\n"
                                      "                      \n"
                                      "QPushButton:hover {\n"
                                      "    background-color: #D4DAFF; \n"
                                      "    color:#FDFAEB;\n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 8, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.pushButton.clicked.connect(self.setSignal)
        self.pushButton.clicked.connect(MainWindow.close)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setSignal(self):
        amplitude = float(self.lineEdit_amplitude.text())
        frequency = float(self.lineEdit_frequency.text())
        offset = float(self.lineEdit_offset.text())
        self.red.set_square(output=self.output, frequency=frequency, amplitude=amplitude, offset=offset)

    def retranslateUi(self, MainWindow):
        """
        write txt on UI
        :param MainWindow: yes
        :return: None
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Frequency [Hz]"))
        self.label.setText(_translate("MainWindow", "Square"))
        self.label_4.setText(_translate("MainWindow", "Offset [V]"))
        self.label_2.setText(_translate("MainWindow", "Amplitude [V]"))
        self.pushButton.setText(_translate("MainWindow", "Apply"))



